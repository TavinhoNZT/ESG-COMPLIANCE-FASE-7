name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ESG API

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ESG.Compliance.Api.sln

      - name: Build (Release)
        run: dotnet build ESG.Compliance.Api.sln -c Release --no-restore

      - name: Definir senha do SQL (fallback)
        shell: bash
        run: |
          if [ -z "${{ secrets.SQL_SA_PASSWORD }}" ]; then
            echo "SQL_SA_PASSWORD=P@ssw0rd!12345" >> $GITHUB_ENV
          else
            echo "SQL_SA_PASSWORD=${{ secrets.SQL_SA_PASSWORD }}" >> $GITHUB_ENV
          fi

      - name: Subir SQL Server (Docker)
        run: |
          docker rm -f esg-db || true
          docker run -d --name esg-db \
            -e ACCEPT_EULA=Y \
            -e SA_PASSWORD=${{ env.SQL_SA_PASSWORD }} \
            -p 14330:1433 \
            mcr.microsoft.com/mssql/server:2022-latest

      - name: Buildar imagem da API (Docker)
        run: |
          docker build -t esg-api-test:local -f "ESG API/ESG.Compliance.Api/Dockerfile" .

      - name: Criar rede e conectar DB
        run: |
          docker network rm esgnet || true
          docker network create esgnet
          docker network connect esgnet esg-db

      - name: Subir API (Docker)
        env:
          CONNECTION_STRING: Server=esg-db,1433;Database=EsgComplianceDb;User Id=sa;Password=${{ env.SQL_SA_PASSWORD }};Encrypt=False;TrustServerCertificate=True
        run: |
          docker rm -f esg-api || true
          docker run -d --name esg-api \
            --network esgnet \
            -e ASPNETCORE_ENVIRONMENT=Development \
            -e DISABLE_HTTPS_REDIRECT=true \
            -e ConnectionStrings__DefaultConnection="$CONNECTION_STRING" \
            -p 8081:8080 \
            esg-api-test:local

      - name: Aguardar API pronta
        run: |
          set -e
          for i in {1..30}; do
            if curl -fsS http://localhost:8081/swagger/index.html >/dev/null; then
              echo "API pronta"; exit 0;
            fi
            echo "Aguardando API... tentativa $i"; sleep 3;
          done
          echo "API n√£o ficou pronta a tempo";
          docker logs esg-api || true
          exit 1

      - name: Run tests (Release)
        env:
          TEST_BASE_URL: http://localhost:8081
          DOTNET_ROLL_FORWARD: LatestMajor
        run: dotnet test "ESG API/ESG.Compliance.Api.sln" -c Release --no-build --verbosity normal

      - name: Cleanup containers
        if: always()
        run: |
          docker rm -f esg-api || true
          docker rm -f esg-db || true