name: CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: esg-compliance-api

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore ESG.Compliance.Api.sln

      - name: Build
        run: dotnet build ESG.Compliance.Api.sln -c Release --no-restore

      - name: Test
        run: dotnet test ESG.Compliance.Api.sln -c Release --no-build

  build_and_push_image:
    if: github.event_name == 'push'
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set deploy tag (staging/prod)
        id: settag
        run: |
          if [[ "${GITHUB_REF}" == refs/heads/main ]]; then
            echo "DEPLOY_TAG=staging" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "DEPLOY_TAG=prod" >> $GITHUB_ENV
          else
            echo "DEPLOY_TAG=dev" >> $GITHUB_ENV
          fi

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ESG.Compliance.Api/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.DEPLOY_TAG }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}

  deploy_staging:
    if: github.ref == 'refs/heads/main'
    needs: build_and_push_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy docker-compose to server (staging)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER_STAGING }}
          key: ${{ secrets.SSH_KEY_STAGING }}
          source: "deploy/staging/docker-compose.staging.yml"
          target: "~/esg-compliance-api/deploy/staging"

      - name: Deploy on server (staging)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER_STAGING }}
          key: ${{ secrets.SSH_KEY_STAGING }}
          script: |
            mkdir -p ~/esg-compliance-api/deploy/staging
            cd ~/esg-compliance-api/deploy/staging
            echo "GHCR_OWNER=${{ github.repository_owner }}" > .env
            echo "SQL_SA_PASSWORD=${{ secrets.SQL_SA_PASSWORD_STAGING }}" >> .env
            echo "DB_NAME=EsgComplianceDb" >> .env
            docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" -p "${{ secrets.GHCR_TOKEN }}"
            docker compose --env-file .env -f docker-compose.staging.yml pull
            docker compose --env-file .env -f docker-compose.staging.yml up -d

  deploy_production:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build_and_push_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy docker-compose to server (production)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST_PRODUCTION }}
          username: ${{ secrets.SSH_USER_PRODUCTION }}
          key: ${{ secrets.SSH_KEY_PRODUCTION }}
          source: "deploy/production/docker-compose.production.yml"
          target: "~/esg-compliance-api/deploy/production"

      - name: Deploy on server (production)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_PRODUCTION }}
          username: ${{ secrets.SSH_USER_PRODUCTION }}
          key: ${{ secrets.SSH_KEY_PRODUCTION }}
          script: |
            mkdir -p ~/esg-compliance-api/deploy/production
            cd ~/esg-compliance-api/deploy/production
            echo "GHCR_OWNER=${{ github.repository_owner }}" > .env
            echo "SQL_SA_PASSWORD=${{ secrets.SQL_SA_PASSWORD_PRODUCTION }}" >> .env
            echo "DB_NAME=EsgComplianceDb" >> .env
            docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" -p "${{ secrets.GHCR_TOKEN }}"
            docker compose --env-file .env -f docker-compose.production.yml pull
            docker compose --env-file .env -f docker-compose.production.yml up -d